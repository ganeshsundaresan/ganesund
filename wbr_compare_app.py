{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "817cabf7-6bd1-480a-ab51-adfe4601adba",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-04-10 00:07:28.522 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Localuser\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import fitz  # PyMuPDF\n",
    "import re\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "import io\n",
    "\n",
    "st.set_page_config(page_title=\"WBR Comparison Tool\", layout=\"wide\")\n",
    "\n",
    "# ---------- PDF Extraction & Analysis Functions ----------\n",
    "\n",
    "def extract_metrics_from_pdf(file_bytes, label=\"\"):\n",
    "    doc = fitz.open(stream=io.BytesIO(file_bytes), filetype=\"pdf\")\n",
    "    text = \" \".join(page.get_text() for page in doc)\n",
    "    doc.close()\n",
    "\n",
    "    week_range = re.search(r'(\\d{4}-\\d{2}-\\d{2})\\s+Sta.*?(\\d{4}-\\d{2}-\\d{2})\\s+End', text)\n",
    "    start_date = datetime.strptime(week_range.group(1), '%Y-%m-%d') if week_range else None\n",
    "    week_number = start_date.isocalendar()[1] if start_date else None\n",
    "\n",
    "    metrics = {\n",
    "        'source': label,\n",
    "        'week_number': week_number,\n",
    "        'start_date': start_date,\n",
    "    }\n",
    "\n",
    "    labels = {\n",
    "        'Total GDV': r'Subtotal\\s+\\$([0-9\\.]+)',\n",
    "        'Publishes': r'Publishes\\s+\\$([0-9\\.-]+)',\n",
    "        'Publishes to NAC2': r'Publishes to NAC2.*?\\$([0-9\\.-]+)',\n",
    "        'Fundraiser Traffic': r'Fundraiser Traffic.*?\\$([0-9\\.-]+)',\n",
    "        'Donation Intent': r'Donation Intent.*?\\$([0-9\\.-]+)',\n",
    "        'Donation Yield': r'Donation Yield\\s+\\$([0-9\\.-]+)',\n",
    "    }\n",
    "\n",
    "    for key, pattern in labels.items():\n",
    "        match = re.search(pattern, text)\n",
    "        metrics[key] = float(match.group(1)) if match else None\n",
    "\n",
    "    return metrics\n",
    "\n",
    "def generate_insight(metric, delta, pct):\n",
    "    if pct is None:\n",
    "        return \"Not enough data\"\n",
    "    if \"GDV\" in metric:\n",
    "        return \"↑ Stronger donation volume.\" if delta > 0 else \"↓ Possibly lower traffic or conversion.\"\n",
    "    elif \"Publishes to NAC2\" in metric:\n",
    "        return \"↑ Better conversion.\" if delta > 0 else \"↓ Conversion drop.\"\n",
    "    elif \"Fundraiser Traffic\" in metric:\n",
    "        return \"Traffic changes influenced performance.\"\n",
    "    elif \"Donation Intent\" in metric:\n",
    "        return \"Reflects donor sentiment.\"\n",
    "    elif \"Donation Yield\" in metric:\n",
    "        return \"Avg. donation amount changed.\"\n",
    "    elif \"Publishes\" in metric:\n",
    "        return \"↑ More fundraiser effort.\" if delta > 0 else \"↓ Less engagement.\"\n",
    "    return \"Performance shifted.\"\n",
    "\n",
    "def compare_weeks(curr, prev):\n",
    "    comparison = []\n",
    "    for key in curr.keys():\n",
    "        if key not in prev or not isinstance(curr[key], (float, int)):\n",
    "            continue\n",
    "        current = curr[key]\n",
    "        previous = prev[key]\n",
    "        delta = current - previous\n",
    "        pct_change = (delta / previous * 100) if previous else None\n",
    "        comparison.append({\n",
    "            'Metric': key,\n",
    "            'Current Week': round(current, 2),\n",
    "            'Previous Week': round(previous, 2),\n",
    "            'Change': round(delta, 2),\n",
    "            'Percent Change (%)': round(pct_change, 2) if pct_change is not None else None,\n",
    "            'Insight': generate_insight(key, delta, pct_change)\n",
    "        })\n",
    "    return pd.DataFrame(comparison)\n",
    "\n",
    "# ---------- Streamlit Interface ----------\n",
    "\n",
    "st.title(\"📊 Weekly Business Report Comparison Tool\")\n",
    "\n",
    "col1, col2 = st.columns(2)\n",
    "\n",
    "with col1:\n",
    "    curr_file = st.file_uploader(\"📥 Upload Current Week PDF\", type=\"pdf\", key=\"curr\")\n",
    "\n",
    "with col2:\n",
    "    prev_file = st.file_uploader(\"📥 Upload Previous Week PDF\", type=\"pdf\", key=\"prev\")\n",
    "\n",
    "if curr_file and prev_file:\n",
    "    with st.spinner(\"Extracting and comparing metrics...\"):\n",
    "        curr_metrics = extract_metrics_from_pdf(curr_file.read(), \"Current Week\")\n",
    "        prev_metrics = extract_metrics_from_pdf(prev_file.read(), \"Previous Week\")\n",
    "        comparison_df = compare_weeks(curr_metrics, prev_metrics)\n",
    "\n",
    "    st.subheader(\"🔍 Summary & Insights\")\n",
    "    for _, row in comparison_df.iterrows():\n",
    "        arrow = \"🔺\" if row[\"Change\"] > 0 else \"🔻\"\n",
    "        st.markdown(f\"**{arrow} {row['Metric']}**: {row['Current Week']} ({row['Percent Change (%)']}%) — _{row['Insight']}_\")\n",
    "\n",
    "    st.subheader(\"📋 Full Comparison Table\")\n",
    "    st.dataframe(comparison_df, use_container_width=True)\n",
    "\n",
    "    csv = comparison_df.to_csv(index=False).encode('utf-8')\n",
    "    st.download_button(\"📤 Download CSV Summary\", csv, \"wbr_comparison.csv\", \"text/csv\")\n",
    "else:\n",
    "    st.info(\"Upload both PDFs to start the comparison.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6e636dc-b274-4494-8020-1cf1d53d3cf9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
